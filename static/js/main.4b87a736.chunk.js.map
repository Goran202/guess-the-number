{"version":3,"sources":["components/Hint.js","components/InputNumber.js","components/GuessTryNumber.js","components/GuessHistory.js","components/NewGame.js","components/Instructions.js","components/DebugDiv.js","App.js","serviceWorker.js","index.js"],"names":["Hint","props","className","style","backgroundColor","color","hintText","InputNumber","styles","onSubmit","handleInput","type","min","max","value","currentGuessNumber","onChange","updateValue","onClick","GuessTryNumber","numberOfGuesses","GuessHistory","guessHistoryString","NewGame","resetGame","Instructions","DebugDiv","numberToGuess","App","state","currentNumber","setState","Math","floor","random","e","target","testNumber","abs","console","log","preventDefault","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4b87a736.chunk.js","sourcesContent":["import React from 'react';\n\nconst Hint = (props) => {\n  const styles = {\n    backgroundColor: 'blue',\n    color: 'yellow',\n  };\n  return (\n    <div className=\"block btn\" style={styles}>\n      {props.hintText}\n    </div>\n  );\n};\n\nexport default Hint;\n","import React from 'react';\n\nconst InputNumber = (props) => {\n  const styles = {\n    backgroundColor: 'orange',\n    color: 'black',\n  };\n  return (\n    <form onSubmit={props.handleInput}>\n      <input\n        className=\"block\"\n        type=\"number\"\n        min=\"1\"\n        max=\"100\"\n        value={props.currentGuessNumber}\n        onChange={props.updateValue}\n        style={styles}\n      />\n      <input\n        className=\"block btn\"\n        style={styles}\n        type=\"button\"\n        value=\"Make a guess!\"\n        onClick={props.handleInput}\n      />\n    </form>\n  );\n};\n\nexport default InputNumber;\n","import React from 'react';\n\nconst GuessTryNumber = (props) => {\n  const styles = {};\n  return (\n    <div className=\"block btn\" style={styles}>\n      Number of guesses: {props.numberOfGuesses}\n    </div>\n  );\n};\n\nexport default GuessTryNumber;\n","import React from 'react';\n\nconst GuessHistory = (props) => {\n  const styles = {\n    backgroundColor: 'grey',\n    color: 'black',\n  };\n  return (\n    <div className=\"block btn\" style={styles}>\n      GuessHistory: {props.guessHistoryString}\n    </div>\n  );\n};\n\nexport default GuessHistory;\n","import React from 'react';\n\nconst NewGame = (props) => {\n  const styles = {\n    backgroundColor: 'blue',\n    color: 'black',\n  };\n  return (\n    <button className=\"block btn\" style={styles} onClick={props.resetGame}>\n      NEW GAME{' '}\n    </button>\n  );\n};\n\nexport default NewGame;\n","import React from 'react';\n\nconst Instructions = () => {\n  const styles = {\n    backgroundColor: 'pink',\n    color: 'yellow',\n  };\n  return (\n    <div className=\"block btn\" style={styles}>\n      Instructions\n    </div>\n  );\n};\n\nexport default Instructions;\n","import React from 'react';\n\nconst DebugDiv = (props) => {\n  const styles = {\n    backgroundColor: 'green',\n    color: 'black',\n  };\n  return (\n    <div className=\"block btn\" style={styles}>\n      DebugDiv: {props.numberToGuess}\n    </div>\n  );\n};\n\nexport default DebugDiv;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Hint from './components/Hint';\nimport InputNumber from './components/InputNumber';\nimport GuessButton from './components/GuessButton';\nimport GuessTryNumber from './components/GuessTryNumber';\nimport GuessHistory from './components/GuessHistory';\nimport NewGame from './components/NewGame';\nimport Instructions from './components/Instructions';\nimport DebugDiv from './components/DebugDiv';\nimport './components/style.css';\n\nclass App extends Component {\n  state = {\n    numberToGuess: '',\n    currentNumber: '',\n    currentGuessNumber: '',\n    hintText: '',\n    numberOfGuesses: 0,\n    guessHistoryString: '',\n  };\n\n  componentDidMount() {\n    this.setState({\n      numberToGuess: Math.floor(Math.random() * 100) + 1,\n    });\n  }\n\n  resetGame = () => {\n    this.setState({\n      numberToGuess: Math.floor(Math.random() * 100) + 1,\n      currentNumber: '',\n      currentGuessNumber: '',\n      hintText: '',\n      numberOfGuesses: 0,\n      guessHistoryString: '',\n    });\n  };\n\n  updateValue = (e) => {\n    this.setState({\n      currentGuessNumber: e.target.value,\n    });\n  };\n\n  testNumber = () => {\n    let hintText;\n    Math.abs(this.state.currentGuessNumber - this.state.numberToGuess) < 10\n      ? (hintText = 'Blizu si')\n      : (hintText = 'Daleko si');\n    this.setState({\n      hintText: hintText,\n      numberOfGuesses: this.state.numberOfGuesses + 1,\n      guessHistoryString:\n        this.state.guessHistoryString + ' ' + this.state.currentGuessNumber,\n    });\n    console.log(this.state.numberOfGuesses);\n  };\n\n  handleInput = (e) => {\n    e.preventDefault();\n    console.log('handleInput: ' + this.state.currentGuessNumber + ' END');\n    this.testNumber();\n  };\n\n  render() {\n    return (\n      <>\n        <h1 style={{ color: 'white' }}>Guess the number!</h1>\n        <DebugDiv numberToGuess={this.state.numberToGuess} />\n        <Hint hintText={this.state.hintText} />\n        <InputNumber\n          currentGuessNumber={this.state.currentGuessNumber}\n          updateValue={this.updateValue}\n          testNumber={this.testNumber}\n          handleInput={this.handleInput}\n        />\n        {/* <GuessButton /> */}\n        <GuessTryNumber numberOfGuesses={this.state.numberOfGuesses} />\n        <GuessHistory guessHistoryString={this.state.guessHistoryString} />\n        <NewGame resetGame={this.resetGame} />\n        <Instructions />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}